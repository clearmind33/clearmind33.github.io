{"version":3,"sources":["components/Profile/Profile.jsx","components/Statistics/Statistics.jsx","components/FriendListItem/FriendListItem.jsx","components/FrendList/FrendList.jsx","components/TransactionHistory/TransactionHistory.jsx","App.js","serviceWorker.js","index.js"],"names":["Profile","avatar","name","tag","location","stats","className","src","alt","followers","views","likes","Statistics","title","map","item","key","id","label","percentage","FriendListItem","isOnline","width","FrendList","friends","TransactionHistory","items","i","type","amount","currency","App","user","statisticalData","transactions","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+5GAKaA,G,MAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,KAAMC,EAAjB,EAAiBA,IAAKC,EAAtB,EAAsBA,SAAUC,EAAhC,EAAgCA,MAAhC,OACrB,yBAAKC,UAAU,WACf,yBAAKA,UAAU,eACb,yBACEC,IAAKN,EACLO,IAAI,cACJF,UAAU,WAEZ,uBAAGA,UAAU,QAAQJ,GACrB,uBAAGI,UAAU,OAAOH,GACpB,uBAAGG,UAAU,YAAYF,IAE3B,wBAAIE,UAAU,SACZ,4BACE,0BAAMA,UAAU,SAAhB,aACA,0BAAMA,UAAU,YAAYD,EAAMI,YAEpC,4BACE,0BAAMH,UAAU,SAAhB,SACA,0BAAMA,UAAU,YAAYD,EAAMK,QAEpC,4BACE,0BAAMJ,UAAU,SAAhB,SACA,0BAAMA,UAAU,YAAYD,EAAMM,YCvB3BC,G,MAAa,SAAC,GAAD,QAAGC,aAAH,MAAW,QAAX,MAAoBR,aAApB,MAA4B,GAA5B,SACxB,6BAASC,UAAU,cACjB,wBAAIA,UAAU,SAASO,GACvB,wBAAIP,UAAU,aACXD,EAAMS,KAAI,SAAAC,GAAI,OACb,wBAAIC,IAAKD,EAAKE,GAAIX,UAAU,QAC1B,0BAAMA,UAAU,SAASS,EAAKG,OAC9B,0BAAMZ,UAAU,cAAcS,EAAKI,WAAa,a,OCR7CC,G,MAAiB,SAAC,GAAD,IAAGnB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,KAAMmB,EAAjB,EAAiBA,SAAjB,EAA2BJ,GAA3B,OAC5B,wBAAIX,UAAU,aACZ,0BAAMA,UAAW,UAAYe,EAAW,UAAY,aAAcA,GAClE,yBAAKf,UAAU,SAASC,IAAKN,EAAQO,IAAI,GAAGc,MAAM,OAClD,uBAAGhB,UAAU,QAAQJ,MCHZqB,G,MAAY,kBACvB,wBAAIjB,UAAU,eACXkB,EAAQV,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAgBC,IAAKD,EAAKE,GAAIhB,OAAQc,EAAKd,OAAQC,KAAMa,EAAKb,KAAMmB,SAAUN,EAAKM,iBCH/FI,G,MAAqB,SAAC,GAAD,QAAGC,aAAH,MAAW,GAAX,SAChC,2BAAOpB,UAAU,uBACf,+BACE,4BACE,oCACA,sCACA,0CAGJ,+BACGoB,EAAMZ,KAAI,SAAAa,GAAC,OAAK,wBAAIX,IAAKW,EAAEV,IAC1B,4BAAKU,EAAEC,MACP,4BAAKD,EAAEE,QACP,4BAAKF,EAAEG,kB,MCIAC,MAXf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,CAASL,OAAQ+B,EAAK/B,OAAQC,KAAM8B,EAAK9B,KAAMC,IAAK6B,EAAK7B,IAAKC,SAAU4B,EAAK5B,SAAUC,MAAO2B,EAAK3B,QACnG,kBAAC,EAAD,CAAYQ,MAAM,eAAeR,MAAO4B,IACxC,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAoBP,MAAOQ,MCJbC,QACW,cAA7BC,OAAOhC,SAASiC,UAEe,UAA7BD,OAAOhC,SAASiC,UAEhBD,OAAOhC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.228c9b8c.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Profile.css'\n\nexport const Profile = ({ avatar, name, tag, location, stats }) => (\n  <div className=\"profile\">\n  <div className=\"description\">\n    <img\n      src={avatar}\n      alt=\"user avatar\"\n      className=\"avatar\"\n    />\n    <p className=\"name\">{name}</p>\n    <p className=\"tag\">{tag}</p>\n    <p className=\"location\">{location}</p>\n  </div>\n  <ul className=\"stats\">\n    <li>\n      <span className=\"label\">Followers</span>\n      <span className=\"quantity\">{stats.followers}</span>\n    </li>\n    <li>\n      <span className=\"label\">Views</span>\n      <span className=\"quantity\">{stats.views}</span>\n    </li>\n    <li>\n      <span className=\"label\">Likes</span>\n      <span className=\"quantity\">{stats.likes}</span>\n    </li>\n  </ul>\n</div>\n)\n\nProfile.propTypes = {\n  avatar: PropTypes.string,\n  name: PropTypes.string,\n  tag: PropTypes.string,\n  location: PropTypes.string,\n  stats: PropTypes.shape({\n    color: PropTypes.number,\n    views: PropTypes.number,\n    likes: PropTypes.number,\n  })\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Statistics.css'\n\nexport const Statistics = ({ title = 'Title', stats = [] }) => (\n  <section className=\"statistics\">\n    <h2 className=\"title\">{title}</h2>\n    <ul className=\"stat-list\">\n      {stats.map(item => (\n        <li key={item.id} className=\"item\">\n          <span className=\"label\">{item.label}</span>\n          <span className=\"percentage\">{item.percentage + '%'}</span>\n        </li>\n      ))}\n    </ul>\n  </section>\n)\n\nStatistics.propTypes = {\n  title: PropTypes.string,\n  stats: PropTypes.array\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './FriendListItem.css';\n\nexport const FriendListItem = ({ avatar, name, isOnline, id }) => (\n  <li className=\"list-item\">\n    <span className={\"status\" + (isOnline ? \" online\" : \" offline\")}>{isOnline}</span>\n    <img className=\"avatar\" src={avatar} alt=\"\" width=\"70\" />\n    <p className=\"name\">{name}</p>\n  </li>\n);\n\nFriendListItem.propTypes = {\n  avatar: PropTypes.string,\n  name: PropTypes.string,\n  isOnline: PropTypes.bool\n};","import React from 'react'\nimport friends from '../../friends.json';\nimport { FriendListItem } from '../FriendListItem/FriendListItem.jsx'\nimport './FrendList.css'\n\nexport const FrendList = () => (\n  <ul className=\"friend-list\">\n    {friends.map(item => <FriendListItem key={item.id} avatar={item.avatar} name={item.name} isOnline={item.isOnline} />)}\n  </ul>\n)\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TransactionHistory.css';\n\nexport const TransactionHistory = ({ items = [] }) => (\n  <table className=\"transaction-history\">\n    <thead>\n      <tr>\n        <th>Type</th>\n        <th>Amount</th>\n        <th>Currency</th>\n      </tr>\n    </thead>\n    <tbody>\n      {items.map(i => (<tr key={i.id}>\n        <td>{i.type}</td>\n        <td>{i.amount}</td>\n        <td>{i.currency}</td>\n      </tr>))}\n    </tbody>\n  </table>\n);\n\nTransactionHistory.propTypes = {\n  items: PropTypes.array\n};","import React from 'react';\nimport user from './user.json';\nimport statisticalData from './statistical-data.json';\nimport transactions from './transactions.json';\nimport { Profile } from './components/Profile/Profile.jsx';\nimport { Statistics } from './components/Statistics/Statistics.jsx';\nimport { FrendList } from './components/FrendList/FrendList.jsx';\nimport { TransactionHistory } from './components/TransactionHistory/TransactionHistory.jsx';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Profile avatar={user.avatar} name={user.name} tag={user.tag} location={user.location} stats={user.stats} />\n      <Statistics title=\"Upload stats\" stats={statisticalData} />\n      <FrendList />\n      <TransactionHistory items={transactions} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}